/*
 * Copyright 2007 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.widgetideas.table.client;

import com.google.gwt.user.client.rpc.IsSerializable;

import java.util.Iterator;

/**
 * A class to retrieve row data to be used in a table.
 */
public abstract class TableModel {
  /**
   * Callback for {@link TableModel}. Every Request should be associated with a
   * callback that should be called after a Response is generated.
   */
  public static interface Callback {
    /**
     * Consume the data created by {@link TableModel} in response to a Request.
     * 
     * @param request the request
     * @param response the response
     */
    public void onRowsReady(Request request, Response response);
  }

  /**
   * A {@link TableModel} request.
   */
  public static class Request implements IsSerializable {
    /**
     * The number of rows to request.
     */
    private int numRows;

    /**
     * Indicates whether or not we are sorting in ascending or descending order.
     */
    private boolean sortAscending;

    /**
     * The column index to sort.
     */
    private int sortIndex;

    /**
     * The first row of table data to request.
     */
    private int startRow;

    /**
     * Constructor.
     */
    public Request() {
    }

    /**
     * Constructor.
     * 
     * @param startRow the first row to request
     * @param numRows the number of rows to request
     */
    public Request(int startRow, int numRows) {
      this(startRow, numRows, -1, true);
    }

    /**
     * Constructor.
     * 
     * @param startRow the first row to request
     * @param numRows the number of rows to request
     * @param sortIndex the index to sort by
     * @param sortAscending true to sort ascending, false for descending
     */
    public Request(int startRow, int numRows, int sortIndex,
        boolean sortAscending) {
      this.startRow = startRow;
      this.numRows = numRows;
      this.sortIndex = sortIndex;
      this.sortAscending = sortAscending;
    }

    /**
     * Get the number of rows to request.
     * 
     * @return the number of requested rows
     */
    public int getNumRows() {
      return numRows;
    }

    /**
     * Get the sort index. If the index is -1, the sort order is not specified.
     * 
     * @return the sort index, of -1 if not specified
     */
    public int getSortIndex() {
      return sortIndex;
    }

    /**
     * Get the first row to request.
     * 
     * @return the first requested row
     */
    public int getStartRow() {
      return startRow;
    }

    /**
     * Return true if the sort order is ascending, false if descending.
     * 
     * @return the sort order
     */
    public boolean isSortAscending() {
      return sortAscending;
    }
  }

  /**
   * A response from the {@link TableModel}.
   * 
   */
  public abstract static class Response {
    /**
     * Gets the iterator associated with the row data generated by the
     * {@link Response}.
     * 
     * @return the rows data
     */
    public abstract Iterator/* <Iterator<Iterator<Object>>> */iterator();
  }

  /**
   * Use the ALL_ROWS value in place of the numRows variable when requesting all
   * rows.
   */
  public static final int ALL_ROWS = -1;

  /**
   * Event fired when a row is inserted.
   * 
   * @param beforeRow the row index of the new row
   */
  public abstract void onRowInserted(int beforeRow);

  /**
   * Event fired when a row is removed.
   * 
   * @param row the row index of the removed row
   */
  public abstract void onRowRemoved(int row);

  /**
   * Event fired when the local data changes.
   * 
   * @param row the row index
   * @param cell the cell index
   * @param data the new contents of the cell
   */
  public abstract void onSetData(int row, int cell, Object data);

  /**
   * Generate a Response based on a specific Request. After the is created, it
   * is passed into the Callback.
   * 
   * @param startRow the first row to request
   * @param numRows the number of rows to request
   * @param callback the callback to use for the response
   */
  public void requestRows(int startRow, int numRows, Callback callback) {
    requestRows(new Request(startRow, numRows), callback);
  }

  /**
   * Generate a Response based on a specific Request. After the is created, it
   * is passed into the Callback.
   * 
   * @param startRow the first row to request
   * @param numRows the number of rows to request
   * @param callback the callback to use for the response
   * @param sortIndex the index to sort by
   * @param sortAscending true to sort ascending, false for descending
   */
  public void requestRows(int startRow, int numRows, int sortIndex,
      boolean sortAscending, Callback callback) {
    requestRows(new Request(startRow, numRows, sortIndex, sortAscending),
        callback);
  }

  /**
   * Generate a Response based on a specific Request. After the is created, it
   * is passed into the Callback.
   * 
   * @param request the request
   * @param callback the callback to use for the response
   */
  public abstract void requestRows(Request request, Callback callback);
}
