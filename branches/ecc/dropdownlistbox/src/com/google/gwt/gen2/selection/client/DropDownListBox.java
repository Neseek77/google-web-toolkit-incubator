/*
 * Copyright 2008 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.gwt.gen2.selection.client;

import com.google.gwt.gen2.commonwidget.client.DropDownPanel;
import com.google.gwt.gen2.commonwidget.client.ToggleControl;
import com.google.gwt.gen2.commonwidget.client.ToggleControl.ToggleState;
import com.google.gwt.gen2.event.shared.HandlerRegistration;
import com.google.gwt.gen2.event.shared.RenderEvent;
import com.google.gwt.gen2.event.shared.RenderHandler;
import com.google.gwt.gen2.event.shared.ChoiceEvent;
import com.google.gwt.gen2.event.shared.ChoiceHandler;
import com.google.gwt.gen2.widget.client.Decorator;
import com.google.gwt.gen2.widget.client.IncubatorComposite;
import com.google.gwt.gen2.widget.client.IncubatorWidget;
import com.google.gwt.gen2.widget.client.WidgetCssInfo;
import com.google.gwt.gen2.widget.client.IncubatorWidget.AbstractCss;
import com.google.gwt.libideas.resources.client.CssResource.ClassName;
import com.google.gwt.user.client.Command;
import com.google.gwt.user.client.Event;
import com.google.gwt.user.client.ui.HasAnimation;
import com.google.gwt.user.client.ui.KeyboardListener;
import com.google.gwt.user.client.ui.MenuItemSeparator;
import com.google.gwt.user.client.ui.MultiWordSuggestOracle;
import com.google.gwt.user.client.ui.SuggestionMenuImpl;

import java.util.HashMap;

/**
 * A custom drop down list box.
 * 
 * <br/> Use {@link DropDownCssInfo#injectDefaultDropDownListBoxCss()} to inject
 * the default list box css when css injection is enabled, include the DebugCss
 * module (which picks up all the default css files), to debug the default css.
 * 
 * @param <Value> the type of the values backing this list box
 */
public class DropDownListBox<Value> extends
    IncubatorComposite<ToggleControl, DropDownListBox.Css> implements
    ChoiceEvent.Source, RenderEvent.Source, HasAnimation {

  /**
   * Interface used to allow the widget access to css style names. <p/> The
   * class names indicate the default gwt names for these styles.
   * 
   * <p/>
   * 
   * It should be noted that the underlying toggle button is not css-enabled, so
   * is hard-coded to "gwt-DropDownListBox". Pass in your own custom
   * {@link ToggleButton} to change the toggle button's styles. <p/>
   */
  public static interface Css extends AbstractCss {
    @ClassName("gwt-DropDownListBox-chosenAndHighlightedItem")
    String chosenAndHighlightedItem();

    @ClassName("gwt-DropDownListBox-chosenItem")
    String chosenItem();

    @ClassName("gwt-DropDownListBox-dropdown")
    String dropdown();

    @ClassName("gwt-DropDownListBox-highlightedItem")
    String highlightedItem();

    @ClassName("gwt-DropDownListBox-innerSep")
    String innerSep();

    @ClassName("gwt-DropDownListBox-item")
    String item();

    @ClassName("gwt-DropDownListBox-outerSep")
    String outerSep();

    @ClassName("gwt-DropDownListBox")
    String styleName();
  }

  /**
   * Adaptor class to allow the use of setStyleName/setPrimaryStyleName. Right
   * now these are created manually, could be generated by a generator in the
   * medium term.
   */
  protected static class CssAdaptor extends IncubatorWidget.CssAdaptor
      implements DropDownListBox.Css {

    public CssAdaptor(String baseStyleName) {
      super(baseStyleName);
    }

    public String chosenAndHighlightedItem() {
      return wrap("chosenAndHighlightedItem");
    }

    public String chosenItem() {
      return wrap("chosenItem");
    }

    @Override
    public IncubatorWidget.CssAdaptor copy(String name) {
      return new CssAdaptor(name);
    }

    public String dropdown() {
      return wrap("dropdown");
    }

    public String highlightedItem() {
      return wrap("highlightedItem");
    }

    public String innerSep() {
      return wrap("innerSep");
    }

    public String item() {
      return wrap("item");
    }

    public String outerSep() {
      return wrap("outerSep");
    }
  }

  private class DropDown extends DropDownPanel<ToggleControl> {
    @Override
    public void hide() {
      DropDownListBox.this.hideItems();
    }

    private void onHide() {
      super.hide();
    }
  }

  /**
   * Menu shared with SuggestBox for efficiency.
   */
  private class ItemMenu extends SuggestionMenuImpl {
    private class Item extends SuggestionItem {
      private Command customCommand;
      private Value value;

      public Item(String html, Value value, String tooltip,
          Command customCommand, String replacement) {

        super(
            new MultiWordSuggestOracle.MultiWordSuggestion(replacement, html),
            true);
        this.value = value;
        this.customCommand = customCommand;
        if (tooltip != null) {
          this.setTitle(tooltip);
        }
      }

      public Command getCustomCommand() {
        return customCommand;
      }

      public String getTooltip() {
        return getSuggestion().getReplacementString();
      }

      public Value getValue() {
        return value;
      }

      public boolean isChoice() {
        return this == chosen;
      }

      public boolean isHighlighted() {
        return getHighlightedItem() == this;
      }

      public void updateStyle(boolean isHighlighted, boolean isChoice) {
        String style;
        if (isHighlighted && isChoice) {
          style = css().chosenAndHighlightedItem();
        } else if (isHighlighted) {
          style = css().highlightedItem();
        } else if (isChoice) {
          style = css().chosenItem();
        } else {
          style = css().item();
        }
        this.getElement().setClassName(style);
      }

      @Override
      protected void updateStyle(boolean isHighlighted) {
        updateStyle(isHighlighted, isChoice());
      }
    }

    private HashMap<Value, Item> map = new HashMap<Value, Item>();

    private Item chosen;

    public void addItem(String html, Value value, String tooltip,
        String replacement, Command command) {
      assert (html != null);
      assert (value != null);

      Item menuItem = new Item(supplyItemDecorator().wrapHTML(html), value,
          tooltip, command, replacement);
      menuItem.setStyleName(css().item());
      menuItem.customCommand = command;
      map.put(value, menuItem);
      super.addItem(menuItem);
      rerender = true;
    }

    public final void choose(Value value) {
      onChoice(getItem(value));
    }

    public Value getChoiceValue() {
      return getValue(chosen);
    }

    public Value getHighlightedValue() {
      return getValue(getHighlightedItem());
    }

    public void onHide() {
      // TODO(ecc) once we get rid of the PopupPanelOverride hack, should be
      // able to again pass in dropdown.
      super.onPopupClosed(null, false);

      // Clear chosen highlight.
      highlightItem(null);
    }

    @Override
    protected void onChoice(SuggestionItem newItem) {
      if (newItem == chosen) {
        return;
      }
      Value oldValue = null;
      if (chosen != null) {
        chosen.updateStyle(chosen.isHighlighted(), false);
        oldValue = chosen.getValue();
      }

      chosen = (Item) newItem;
      if (newItem != null) {
        chosen.updateStyle(chosen.isHighlighted(), true);
        if (chosen.getCustomCommand() != null) {
          chosen.getCustomCommand().execute();
        }
      }
      hideItems();
      Value newValue = null;
      String replacementString = defaultFace;
      if (chosen != null) {
        newValue = chosen.getValue();
        String local = newItem.getSuggestion().getReplacementString();
        if (local != null) {
          replacementString = local;
        }
      }
      fireEvent(new ChoiceEvent(oldValue, newValue));
      getToggle().setFace(replacementString);
    }

    @Override
    protected void onHighlight(SuggestionItem s) {
      // we don't need to do anything on highlight yet.
    }

    private Item getItem(Value value) {
      return map.get(value);
    }

    private Value getValue(SuggestionItem item) {
      return (item == null ? null : ((Item) item).getValue());
    }
  }

  /**
   * Provides the default css info for this widget.
   */
  public static DropDownListBox.Css DEFAULT_CSS = new CssAdaptor(
      "gwt-DropDownListBox");

  public static void injectDefaultCss() {
    if (WidgetCssInfo.isInjectionEnabled()) {
      WidgetCssInfo.addDefaultDropDownListBoxFile();
    }
  }

  private ItemMenu itemMenu = new ItemMenu();

  private DropDown dropDown = new DropDown();

  private boolean rerender = true;

  private String defaultFace;

  /**
   * Constructor, supplies the default css and a toggle button with the style
   * name "gwt-DropDownListBox-button".
   * 
   * @param html
   */
  public DropDownListBox(String html) {
    this(html, DEFAULT_CSS);
  }

  /**
   * Constructor, supplies a default toggle button with the style name
   * "gwt-DropDownListBox-button".
   * 
   */
  public DropDownListBox(String html, Css css) {
    this(html, new ToggleControl.Default("gwt-DropDownListBox-button"), css);
  }

  /**
   * Creates a drop down list box with the given html as its face.
   */
  public DropDownListBox(String defaultFace, ToggleControl control, Css css) {
    initWidget(control);
    setCss(css);
    this.defaultFace = defaultFace;
    control.setFace(defaultFace);
    dropDown.setWidget(itemMenu);
    supplyDropDownDecorator().wrapElementInPlace(itemMenu.getElement());
    control.setFace(defaultFace);
    control.addChoiceHandler(new ChoiceHandler<ToggleState>() {
      public void onUpdateValue(ChoiceEvent<ToggleState> event) {
        if (event.getNewValue() == ToggleState.DOWN) {
          showItems();
        } else {
          hideItems();
        }
      }
    });
  }

  public final HandlerRegistration addChoiceHandler(ChoiceHandler handler) {
    return super.addHandler(ChoiceEvent.KEY, handler);
  }

  /**
   * Adds an item to the drop down list box.
   * 
   * @param html the html of the item to be displayed
   * @param value the item's value.
   */
  public final void addItem(String html, Value value) {
    addItem(html, value, null, null);
  }

  /**
   * Adds an item to the drop down list box.
   * 
   * @param html the html of the item to be added
   * @param value the item's value.
   * @param command the command to run once the item is chosen
   */
  public final void addItem(String html, Value value, Command command) {
    itemMenu.addItem(html, value, null, null, command);
  }

  /**
   * Adds an item to the drop down list box.
   * 
   * @param html the html of the item to be added
   * @param value the item's value.
   * @param tooltip tooltip
   */
  public final void addItem(String html, Value value, String tooltip) {
    itemMenu.addItem(html, value, tooltip, null, null);
  }

  /**
   * Adds an item to the drop down list box.
   * 
   * @param html the html of the item to be added
   * @param value the item's value.
   * @param tooltip tooltip
   * @param buttonFace the button face that should be displayed when this item
   *          is selected
   */
  public final void addItem(String html, Value value, String tooltip,
      String buttonFace) {
    itemMenu.addItem(html, value, tooltip, buttonFace, null);
  }

  /**
   * Adds an item to the drop down list box, specifying an initial value for the
   * item.
   * 
   * @param html the html of the item to be added
   * @param value the item's value.
   * @param tooltip the tooltip for this item
   * @param buttonFace the button face that should be displayed when this item
   *          is selected
   * @param command the command to run once the item is chosen
   */
  public final void addItem(String html, Value value, String tooltip,
      String buttonFace, Command command) {
    itemMenu.addItem(html, value, tooltip, buttonFace, command);
  }

  public final HandlerRegistration addRenderHandler(RenderHandler handler) {
    return addHandler(RenderEvent.KEY, handler);
  }

  /**
   * Adds a list item separator.
   */
  public final void addSeparator() {
    MenuItemSeparator sep = itemMenu.addSeparator();
    sep.setStyleName(css().outerSep());
    sep.getElement().getFirstChildElement().setClassName(css().innerSep());
    rerender = true;
  }

  /**
   * Sets the chosen value.
   * 
   * @param value the chosen value
   */
  public final void chose(Value value) {
    itemMenu.choose(value);
  }

  /**
   * Gets the chosen value.
   */
  public final Value getChosenValue() {
    return itemMenu.getChoiceValue();
  }

  public final Value getHighlightedValue() {
    return itemMenu.getHighlightedValue();
  }

  /**
   * Gets the toggle used by this drop down list box.
   */
  public ToggleControl getToggle() {
    return getWidget();
  }

  public final void hideItems() {
    getToggle().setState(ToggleState.UP);
    itemMenu.onHide();
    dropDown.onHide();
  }

  public final boolean isAnimationEnabled() {
    return dropDown.isAnimationEnabled();
  }

  @Override
  public final void onBrowserEvent(Event e) {
    switch (e.getTypeInt()) {
      case Event.ONKEYDOWN:
        int keycode = e.getKeyCode();
        if (keycode == KeyboardListener.KEY_TAB) {
          hideItems();
        } else if (itemMenu.isAttached()) {
          itemMenu.onBrowserEvent(e);
        } else if (keycode == KeyboardListener.KEY_DOWN) {
          showItems();
        }
        break;
    }
    super.onBrowserEvent(e);
  }

  public final void setAnimationEnabled(boolean enabled) {
    dropDown.setAnimationEnabled(enabled);
  }

  public final void showItems() {
    if (rerender) {
      rerender = false;
      fireEvent(new RenderEvent());
    }
    getToggle().setState(ToggleState.DOWN);
    dropDown.showRelativeTo(getToggle());
  }

  /**
   * On css init.
   * 
   * @param css the new css.
   */
  @Override
  protected void onSet(Css css, boolean initializing) {
    // The toggle control controls its own style names.
    dropDown.setStylePrimaryName(css.dropdown());
  }

  /**
   * Supply a decorator for the drop down.
   * 
   * @return a decorator
   */
  protected Decorator supplyDropDownDecorator() {
    return Decorator.DEFAULT;
  }

  /**
   * Supply a decorator for the item decorator.
   * 
   * @return a decorator
   */
  protected Decorator supplyItemDecorator() {
    return Decorator.DEFAULT;
  }
}
