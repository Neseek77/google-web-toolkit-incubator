<!--##########################
As an interm solution until we have a formatter that is not tied to an IDE, if you wish to
auto-format incubator ant files you must use eclipse with the following configuration:
Tab size: 2
|  | Use tab character instead of spaces
Maximum line width: 100
|x| Wrap long element tags
|  | Align final '>' in multi-line element tags

Long term todos:
see if project.external.bin -> project.bin safely
create flag that wipes all test results, by default wipe only current
there exists a [out-of-date] command which may allow us to avoid the .body tasks.
-->

<project name="gwt-incubator" default="build">

  <!-- "build" is the default incubator target -->
  <property name="project.target" value="build" />

  <!-- Set up initial environment -->
  <property name="project.root" location="." />

  <property name="project.build.properties" value="${project.root}/build.properties" />

  <property file="${project.build.properties}" />

  <!-- Also check for global-incubator.properties in the directory above -->
  <property file="${project.root}/../global-incubator.properties" />

  <property environment="env" />

  <!--
    Check for gwt.home.
    -->

  <condition property="gwt.home" value="${env.GWT_HOME}">
    <isset property="env.GWT_HOME" />
  </condition>


  <!-- import common config -->
  <import file="${project.root}/common.ant.xml" />
  <import file="${project.root}/testsets.ant.xml" />

  <!-- Specify project jars -->
  <property name="project.jar" value="${project.dist}/gwt-incubator.jar" />
  <property name="project-servlet.jar" value="${project.dist}/gwt-incubator-servlet.jar" />
  <property name="project.test.jar" location="${project.test}/incubator_tests.jar" />


  <!-- With a project.external.bin specified, set project.bin to it -->
  <available file="${gwt.tools}" type="dir" property="gwt.tools.exists" />


  <!-- Setting up the project bin -->

  <condition property="project.bin" value="${project.external.bin}">
    <isset property="project.external.bin" />
  </condition>

  <property name="project.bin" value="${project.build}/bin" />

  <!-- Javadoc -->
  <property name="project.javadoc" location="${project.out}/javadoc" />



  <!--As the ant task selector puts tasks in the order given by the build file,
    we have sorted all common public tasks first-->
  <target name="build" depends="checksetup, compile" description="Packages the incubator jar">
    <mkdir dir="build" />
    <mkdir dir="${project.dist}" />
    <jar destfile="${project.jar}">
      <zipfileset src="${gwt.tools}/lib/javaswf/javaswf-20050404.jar" />
      <zipfileset src="${gwt.tools}/lib/w3c/sac/sac-1.3.jar" />
      <zipfileset src="${gwt.tools}/lib/w3c/flute/flute-1.3.jar" />
      <fileset dir="src">
        <exclude name="**/demos/**" />
        <exclude name="**/examples/**" />
      </fileset>
      <fileset dir="super">
      </fileset>
      <fileset dir="${project.bin}">
        <exclude name="**/demo/**" />
        <exclude name="**/demos/**" />
        <exclude name="**/examples/**" />
      </fileset>
    </jar>
    <jar destfile="${project-servlet.jar}">
      <fileset dir="${project.bin}">
        <include name="**/shared/**" />
        <include name="**/server/**" />
      </fileset>
    </jar>
  </target>
  <target name="help" description="Short description of incubator properties and tasks">
    <echo>
            Incubator properties
            gwt.home
            The location of the GWT jars you wish to compile and run against.
            
            gwt.tools
            The location of your GWT tools dir.
            
            gwt.remote.browsers
            list of remote browsers to run while running junit tests.
            
            project.jar
            Where should the gwt-incubator jar be created.
            
            project.external.bin
            If you a running in a very tight debug loop, you can set this property
            so ant won't recompile your source. Instead ant will use the classes
            provided by the project.external.bin directory.
            Note: No validation checking is done, so only use this flag if you are
            absolutely sure that your external.bin is up to date and valid.
            
            project.test.filter
            We will run only the tests which match the filter provided when the
            user invokes a testing task.
            
            project.build.properties
            Where you have defined the above propeties.
            
            Incubator tasks
            The incubator tasks are self-documenting. The list of public ones are
            build,help,dist,clean,all,test, test.hosted,test.web,test.remoteweb
        </echo>
  </target>


  <target name="dist"
          depends="build,createJavadoc"
          description="Assembles the full incubator distribution.">
    <mkdir dir="${project.out}" />
    <mkdir dir="${project.demos}" />

    <javac srcdir="${project.root}/src-demo"
           destdir="${project.bin}"
           debug="${javac.debug}"
           debuglevel="${javac.debuglevel}"
           source="${javac.source}"
           target="${javac.target}"
           nowarn="${javac.nowarn}"
           encoding="${javac.encoding}">
      <classpath>
        <pathelement location="${project.jar}" />
        <pathelement location="${gwt.user.jar}" />
        <pathelement location="${gwt.dev.jar}" />
      </classpath>
    </javac>


    <jar destfile="${project.demos}/incubator-demos.jar">
      <fileset dir="${project.src}">
        <include name="**/demos/**" />
        <include name="**/examples/**" />
      </fileset>
      <fileset dir="${project.root}/src-demo">
        <include name="**/demos/**" />
        <include name="**/examples/**" />
      </fileset>
      <fileset dir="${project.bin}">
        <include name="**/demos/**" />
        <include name="**/examples/**" />
      </fileset>
    </jar>
    <copy todir="${project.demos}/web">
      <fileset dir="demo">
      </fileset>
    </copy>
    <mkdir dir="${project.dist}" />
    <zip destfile="${project.dist}/gwt-incubator.zip" includesFile="${project.jar}">
      <zipfileset dir="${project.out}" />
      <fileset dir="${project.dist}" includes="${project.jar}" />
    </zip>
  </target>

  <target name="clean" description="Cleans intermediate and output files">
    <delete dir="${project.build}" />
  </target>

  <target name="all"
          description=" Cleans, builds,tests, and packages incubator"
          depends="clean,build,test,dist" />


  <!-- Testing public tasks -->
  <target name="test"
          depends="build.tests"
          description="Run hosted-mode, web-mode, and remoteweb tests for this project.">
    <!--
        Run hosted and web mode tests for the platform on which this build
        is executing
        -->
    <limit failonerror="true" hours="2">
      <parallel threadsPerProcessor="2">
        <!-- test.remoteweb.body is a no-op unless gwt.remote.browsers is defined -->
        <antcall target="test.remoteweb.body" />
        <antcall target="test.hosted.body" />
        <antcall target="test.web.body" />
        <!-- test.selenium.body is a no-op unless gwt.selenium.hosts is defined -->
        <antcall target="test.selenium.body" />
      </parallel>
    </limit>
  </target>


  <target name="test.selenium"
          description="Run a remote test using Selenium RC test at the given host and path"
          depends="build.tests,test.selenium.body">
  </target>

  <target name="test.hosted"
          depends="build.tests, test.hosted.body"
          description="Runs only hosted mode tests">
  </target>

  <target name="test.web"
          depends="build.tests, test.web.body"
          description="Run only web-mode tests, locally, for this project.">
  </target>

  <target name="test.remoteweb"
          description="Run a remoteweb test at the given host and path"
          depends="build.tests,test.remoteweb.body">
  </target>


  <target name="createJavadoc">
    <delete dir="${project.javadoc}" />
    <mkdir dir="${project.javadoc}" />
    <javadoc destdir="${project.javadoc}" windowtitle="Incubator API">
      <packageset dir="src">
        <include name="com/google/gwt/widgetideas/**" />
        <include name="com/google/gwt/libideas/**" />
        <exclude name="**/impl/**" />
      </packageset>
      <!-- we have a few impl classes that we don't want javadoc created for that must live in ui-->
      <fileset dir="src/com/google/gwt/user/client/ui">
        <exclude name="**Impl**" />
      </fileset>
      <!-- Javadoc has a bug in it that requires the jars on the class path or the index.html will not be created.-->
      <classpath>
        <pathelement location="${project.jar}" />
        <pathelement location="${gwt.user.jar}" />
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.tools.lib}/junit/junit-3.8.1.jar" />
      </classpath>
    </javadoc>
  </target>

  <!-- helper tasks -->
  <target name="checksetup">
    <fail message="unknown platform" unless="gwt.platform" />
    <echo message="gwt.home = ${gwt.home}" />
    <echo message="gwt.tools = ${gwt.tools}" />
    <echo message="gwt.platform = ${gwt.platform}" />
    <if>
      <isset property="project.external.bin" />
      <then>
        <echo message="project.external.bin = ${project.external.bin}" />
      </then>
    </if>
  </target>

  <!-- Compile the project, unless project.external.bin is specified -->
  <target name="compile" unless="project.external.bin">
    <mkdir dir="${project.bin}" />
    <echo message="Compiling source..." />
    <gwt.javac destdir="${project.bin}">
      <classpath>
        <pathelement location="${gwt.user.jar}" />
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.tools}/lib/javaswf/javaswf-20050404.jar" />
        <pathelement location="${gwt.tools}/lib/w3c/sac/sac-1.3.jar" />
        <pathelement location="${gwt.tools}/lib/w3c/flute/flute-1.3.jar" />
      </classpath>
    </gwt.javac>

  </target>

  <!--#############################
    Testing helper tasks
    -->

  <!-- cleans the report dir to avoid confusion when tracking down unit test failures -->
  <target name="clean.test.results">
    <echo message="cleaning all test results" />
    <delete dir="${project.test.results}" />
  </target>

  <!-- compiles the test code. Even if an exteral bin is set, ant still must compile the tests,
    as we want to only include files reachable from the test source directory-->
  <target name="compile.tests">
    <mkdir dir="${project.test.bin}" />
    <gwt.javac destdir="${project.test.bin}">
      <classpath>
        <pathelement location="${gwt.tools.lib}/junit/junit-3.8.1.jar" />
        <pathelement location="${gwt.user.jar}" />
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${project.jar}" />
        <pathelement location="${project.bin}" />
        <pathelement location="${gwt.tools}/lib/javaswf/javaswf-20050404.jar" />
        <pathelement location="${gwt.tools}/lib/w3c/sac/sac-1.3.jar" />
        <pathelement location="${gwt.tools}/lib/w3c/flute/flute-1.3.jar" />
        <pathelement location="${gwt.tools}/lib/selenium/selenium-java-client-driver.jar" />
      </classpath>
      <src>
        <pathelement location="${project.root}/test" />
      </src>
    </gwt.javac>
  </target>

  <!-- compiles the test code for this project -->
  <target name="build.tests" depends="clean.test.results,build, compile.tests">
    <mkdir dir="${project.test}" />
    <jar destfile="${project.test.jar}">
      <fileset dir="${project.test.bin}" />
      <fileset dir="test" />
    </jar>
  </target>

  <target name="test.hosted.body">
    <gwt.junit test.out="${project.test.results}/${gwt.platform}-hosted-mode"
               test.cases="default.hosted.tests" />
    <fail message="Hosted mode tests failed, log should be in '${project.test.results}\${gwt.platform}-hosted-mode\reports\' directory"
          if="junit.failure" />
  </target>

  <target name="test.web.body">
    <gwt.junit test.args="-out www -web"
               test.out="${project.test.results}/${gwt.platform}-web-mode"
               test.cases="default.web.tests" />
    <fail message="Web mode tests failed, log should be in '${project.test.results}\${gwt.platform}-web-mode\reports\' directory"
          if="junit.failure" />
  </target>


  <target name="test.selenium.body" if="gwt.selenium.hosts">
    <echo message="Performing remote browser testing using Selenium RC at ${gwt.selenium.hosts}" />
    <gwt.junit test.args=" -out www -selenium ${gwt.selenium.hosts}"
               test.out="${project.test.results}/selenium"
               test.cases="default.web.tests">
    </gwt.junit>
    <fail message="Selenium tests failed, log should be in '${project.test.results}\selenium' directory"
          if="junit.failure" />

  </target>

  <target name="test.remoteweb.body" if="gwt.remote.browsers">
    <echo message="Performing remote browser testing at ${gwt.remote.browsers}" />
    <gwt.junit test.args="-out www -remoteweb ${gwt.remote.browsers}"
               test.out="${project.test.results}/remoteweb"
               test.cases="default.web.tests">
    </gwt.junit>
    <fail message="Remote web mode tests failed, log should be in '${project.test.results}\remoteweb\' directory"
          if="junit.failure" />

  </target>

  <target name="gwtc" depends="compile">
    <taskdef name="gwtc" classname="com.google.ant.GwtCompilerTask">
      <classpath>
        <path path="${project.bin}" />
        <pathelement location="${gwt.dev.jar}" />
      </classpath>
    </taskdef>

    <property name="gwtc.vm.maxMemory" value="512m" />

    <gwtc src="${gwtc.src.dir}"
          out="${gwtc.out.dir}"
          moduleFile="${gwtc.module.file}"
          style="${gwtc.js.style}"
          vmMaxMemory="${gwtc.vm.maxMemory}">
      <classpath>
        <path path="${gwtc.src.dir}" />
        <path path="${project.src}" />
        <path path="${project.bin}" />
        <pathelement location="${gwt.user.jar}" />
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.tools}/lib/w3c/sac/sac-1.3.jar" />
        <pathelement location="${gwt.tools}/lib/w3c/flute/flute-1.3.jar" />
      </classpath>
    </gwtc>
  </target>

  <target name="build.demos">
    <property name="demo.src.dir" value="${project.root}/src-demo" />
    <property name="demo.out.dir" value="${project.root}/demo" />
    <property name="demo.js.style" value="PRETTY" />

    <foreach target="gwtc" param="gwtc.module.file">
      <param name="gwtc.src.dir" value="${demo.src.dir}" />
      <param name="gwtc.out.dir" value="${demo.out.dir}" />
      <param name="gwtc.js.style" value="${demo.js.style}" />
      <path>
        <fileset dir="src-demo">
          <include name="**/*.gwt.xml" />
        </fileset>
      </path>
    </foreach>
  </target>
</project>
