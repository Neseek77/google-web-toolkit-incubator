#summary DRAFT GWT Logging API.

= Introduction =
The logging package is designed to be a simple client side logging API. The GWT logging design draws heavily from the [http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/overview.html Java logging API]
and the [http://code.google.com/p/gwt-log/ gwt log] project by Fred Sauer. A special thanks to Fred Sauer for contributing his time to working on the design of this logging system.






== Summary Table ==

|| *Field* || * Location * ||
|| Demo || http://google-web-toolkit-incubator.googlecode.com/svn/trunk/demo/LoggingDemo/LoggingDemo.html || 
|| Sample Code || [http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/demos/logging/client/LoggingDemo.java demo code] ||
|| Module || `com.google.gwt.libideas.Logging` ||
|| Source starting point || http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/libideas/client/logging/Log.java ||

= Details =
 
== Design Goals ==
  # No overhead for logging messages when logging is disabled.
  # Simple lightweight API.  
  # Familiar to Java Programmers.
  # Logging should allow
    # Logging to System.err
    # Logging to the server via RPC
    # Logging to some predefined widgets
    # Logging to firebug console
 
== Open Design Decisions ==
 
= Design Decisions =

==
==Defferred binding==
The Logging api has three compiled options(logging:all/none/minimal).  The other option would be to have a set of predefined levels i.e. logging(off/fine/finer/.../severe). Both are good options, so far we believe the single switch will lead to best full experience.

Advantages for multiple levels:
  # No overhead for logging levels not used when compiled with a GWT 1.5 compiler
  # One field can be used to deploy the correct logging levels for automated systems.


Advantages of single on/off switch
  # Simple model: Intuitive easy to understand that logging level comes from runtime and logging support comes from compile time.
  # Handler Support
    # Allows users to configure handlers based on the logging mode. 
    # Allows system defaults to be smarter. For instance, in minimal mode no handlers are added by default.
  # Encourages what we believe is the best deployment model:
    # One production system where either
      # Log only severe messages
      # Log no error messages.
    # One "debug" system with all logging options.

== Allowing direct access to Logger instances ==
In some cases, it would be useful to directly access a Logger or Handler and print to that one alone.  However, this code would probably not be compiled out in production, so this feature is currently not supported.

 
= Design overview =

== Log ==
Log is a static class. Its API is modeled on the java Logger API. Almost all user interactions should be done through this class to allow compile time removal of logging. It will also include some GWT-specific method.  For instance the methods below:
{{{
   Log.isLoggingEnabled();
   Log.isLoggingMinimal()
}}}
 
== Handler ==
A Handler is a class which actually handles the logging messages.  Its API is modeled in the java Handler class.  Its subclasses will be drawn heavily from the gwt-log subclasses of AbstractLogger.

 
== Level ==
Defines the current logging Level. Based on the java logging Level class.

 