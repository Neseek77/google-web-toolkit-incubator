#summary GWT logging API.
#labels Type-Library

= Introduction =
The logging package is designed to be a simple client side logging API. The GWT logging design draws heavily from the [http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/overview.html Java logging API]
and the [http://code.google.com/p/gwt-log/ gwt-log] project by Fred Sauer. A special thanks to Fred Sauer for contributing his time to working on the design of this logging system.


== Summary Table ==

||Demo:|| [http://collectionofdemos.appspot.com/demo/com.google.gwt.gen2.demo.logging.LoggingDemo/LoggingDemo.html live demo]||
||Java doc: || [http://collectionofdemos.appspot.com/javadoc/com/google/gwt/gen2/logging/shared/Log.html  java doc]||
||Sample Code:|| [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src-demo/com/google/gwt/gen2/demo/logging/client/LoggingDemo.java sample code] ||
||Module:|| [http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/gen2/logging/Logging.gwt.xml Logging]||
||Source ||[http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/gen2/logging/shared/Logging.java source code]|| 

= Sample usage =
|| *Field* || * Location * ||
|| Demo || http://google-web-toolkit-incubator.googlecode.com/svn/trunk/demo/LoggingDemo/LoggingDemo.html || 
|| Sample Code || [http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/demos/logging/client/LoggingDemo.java demo code] ||
|| Module || `com.google.gwt.libideas.Logging` ||
|| Source starting point || http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/libideas/logging/shared/Log.java ||

= Details =
 
== Design Goals ==
=== Logging API ===
  * No overhead for logging messages when logging is disabled.
  * Simple lightweight API
  * Support categories 
  * Support setting logging level via URL arguments  
  * Familiar to Java Programmers
=== Logging Handler/Appender/Publishing API ===
   * User configurable logging handlers
   * Support filtering of handlers via Level
   * Handlers should have access to category information per log message
   * The following predefined logging handlers
     # to System.err/System.out
     # to the server via RPC
     # to some predefined widgets
     # to firebug console
     # to the GWT hosted mode console
    
 
 
=Design Decisions=

==Deferred binding==
The Logging api has three compiled options(logging:all/none/minimal).  The other option would be to have a set of predefined levels i.e. logging(off/fine/finer/.../severe). Both are good options, so far we believe the single switch will lead to best full experience.

Advantages for multiple levels:
  # No overhead for logging levels not used when compiled with a GWT 1.5 compiler
  # One field can be used to deploy the correct logging levels for automated systems.


Advantages of compiler all/none/minimal switch
  # Simple model: Intuitive easy to understand that logging level comes from runtime and logging support comes from compile time. 
  # Avoids permutation explosion.
  # Handler Support
    # Allows users to configure handlers based on the logging mode. 
    # Allows system defaults to be smarter. For instance, in minimal mode no handlers are added by default.
  # Encourages what we believe is the best deployment model:
    # One production system where either
      # Log only severe messages
      # Log no error messages.
    # One "debug" system with all logging options.

== Allowing direct access to Logger instances ==
In some cases, it would be useful to directly access a Logger or Handler and print to that one alone.  However, this code would probably not be compiled out in production, so this feature is currently not supported.

= Design overview =


== `Log` ==
Log is a static class. Its API is modeled on the java Logger API. Almost all user interactions should be done through this class to allow compile time removal of logging. It will also include some GWT-specific method.  For instance the methods below:
{{{
   Log.isLoggingEnabled();
   Log.isLoggingMinimal()
}}}
 
== `LogHandler` ==
A `LogHandle`r is a class which actually handles the logging messages.  Its API is modeled in the java Handler class.  Its subclasses will be drawn heavily from the gwt-log subclasses of `AbstractLogge`.

 
== `Level` ==
Defines the current logging Level. Based on the java logging Level class.

== Categories ==
Categories are represented by strings rather then a Category class. This was done because strings are optimized away more often then class objects.

Categories are hierarchical using the "." notation. For instance, the following snippet of code uses categories to selectively log messages.
{{{
  Log.setDefaultLevel(Level.SEVERE);
  Log.setLevel("gwt", Level.INFO);
  Log.setLevel("gwt.logging", Level.FINE);

  // This message will be logged.
  Log.info("will log", "gwt.subsystem");

  // This message will not be logged.
  Log.fine("will not log", "gwt.subsystem");

  // This message will log.
  Log.fine("will log", "gwt.logging");
}}}
 
== Logging states ==
=== All ===
  # Logging is fully enabled
  # Default handler is `GWTHandler` in hosted mode, `TreeHandler` in web. We use a default widget handler in web mode to ensure the first time someone tries to use the logging system they can find their messages.  
  # Default log level is read as a URL argument parameter.  For example `http://myurl logLevel=INFO`
 
=== Minimal ===
  # Only severe error messages are enabled
  # No default handler
=== None ===
No logging support

= Gen2 modifications =

== `LogEvent` ==
A  `LogEvent` is created once the `Log` class determines that it should broadcast its messages to the registered `LogHandler` instances. 

== `LogHandler` ==
`LogHandler` is now an interface with a single method `onLog(LogEvent)`. The`SmartLogHandler` decorator class has been introduced to contain the current "smart" log handler functionality. In specific, the `SmartLogHandler` allows handlers to be sensitive to levels and to lazily create the actual output log handler.

== `LogFormatter` ==
As log handlers are no longer classes, the formatting helper methods have been abstracted out into the `LogFormatter` hierarchy. We provide a default text and html log formatter.

== Log handler implementations ==
A new default log handler `ClientConsoleLogHandler` has been written that combines the functionality of the `FireBugLogHandler`, `ConsoleLogHandler`, `WindowLogger`(from gwt-log), and the `GWTLogHandler`.  Its goal is to use the best approximation of a console as possible.  
 
The `DivLogHandler` and `SimpleLogHandler` have been factored into a single `SimpleLogHandler` which now can take as input a `LogFormatter`.

The `TreeLogHandler` was converted to use the gwt `Tree` widget and renamed `GroupLogHandler` to avoid the confusion some people had with the hosted mode log handler.

The `PopupLogHandler` became a decorator log handler that can wrap any widget log handler.

== `Log` ==
The actual Log static API is unchanged, so for most users, the rewrite does not make a significant difference. 

We now use super-source tricks so that the `Log` class can be initialized on the java server without an extra user call. You can set the default user log handler using the `ServerLogConfig` class.

== `Level` ==
`Level` now is associated with a `clinit` in order to ensure that the first call to Level.X does not create a null reference.  However, when logging is off, everything should still get compiled out, including the extra `clinits`.

== Logging property ==
The logging property now uses "off" rather then "none" in order to match the java logging level "Level.OFF".