#summary DRAFT The JsMap library

= Design Principles =
Here are the design principles for the js Map library.
  * Must be as fast and have the smallest memory footprint as possible, even if that leads to an uglier API.
  * Code size should be kept small.
  * Many "puts" in sequence should be optimized, if possible, to allow for fast program setup.
  * If we need to use a different implementation in hosted mode, that decision should be transparent to the users.
  * Should have well understood constraints for key/value values.
  * API should be easy to use.
  
= Use cases =
Use cases are listed in order of importance.
==  Need faster map access ==
Your application is very `put`/`get` intensive.  So the speed performance for Java maps is slowing your application down.
== Need smaller memory profile ==
  * The GWT hash map implementation ends up interning all string map keys, this is normally not a problem, but can become a memory hog if there are a large number of keys churning through the system.
  * Your application has a lot of small maps associated with value objects. You would prefer have those maps stored as efficiently as possible.
  
= Benchmarks =
== Baseline Hash Table ==
http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/doc/wiki-support/images/JsMap-hash-benchmark.jpg
== Production JS Map ==
== Wrapped JS Map == 