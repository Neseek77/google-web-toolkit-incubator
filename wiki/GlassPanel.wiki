#summary A semi-transparent panel that can be added to any `AbsolutePanel`.



= Introduction =

A number of use cases are supported by the glass panel widget:
  * Darken/colorize any `AbsolutePanel`. This includes any subclasses such as `RootPanel`, which leads to additional use cases.
  * Attach a glass panel to the document body (i.e. `RootPanel.get()`), which effectively shades or darkens the entire web page. Useful when showing modal dialog boxes where interaction with the rest of the page is not desirable.
  * Darken/colorize any `id` based `RootPanel` (i.e. those obtained via `RootPanel.get(id)`) with a semi-transparent layer.



= Live Demo =

Here is a [http://google-web-toolkit-incubator.googlecode.com/svn/trunk/demo/GlassPanel/GlassPanelDemo.html live demo] with accompanying [http://google-web-toolkit-incubator.googlecode.com/svn/trunk/src/com/google/gwt/demos/glasspanel/client/GlassPanelDemo.java demo source code].


= The basics =


== Override Default CSS ==
{{{
  .gwt-GlassPanel {

    /* Override glass panel color to be `green` */
    background-color: green !important;

    /* Override glass panel opacity to be `10%` (=`90%` transparent) */
    filter: alpha(opacity = 10) !important; /* IE */
    opacity: 0.1 !important; /* non-IE */

  }
}}}


== Constructor javadoc ==
{{{
  /**
   * Create a glass panel widget that can be attached to an AbsolutePanel via
   * `absolutePanel.add(glassPanel, 0, 0)`.
   * 
   * @param autoHide `true` if the glass panel should be automatically hidden
   *          when the user clicks on it or presses `ESC`.
   */
  public GlassPanel(boolean autoHide);
}}}


== Attaching (displaying) your glass panel ==
{{{
  // Create a glass panel with `autoHide = false`
  GlassPanel glassPanel = new GlassPanel(false);

  // Attach (display) the glass panel
  absolutePanel.add(glassPanel, 0, 0);

  // Some time later remove the glass panel
  glassPanel.removeFromParent();
}}}





= A few examples =


== Covering the entire window ==
{{{
  // Create a glass panel with `autoHide = true`
  GlassPanel glassPanel = new GlassPanel(true);

  // Attach (display) the glass panel
  RootPanel.get().add(new GlassPanel(true), 0, 0);
}}}


== Covering a simple `AbsolutePanel` ==
{{{
  // Create a simple AbsolutePanel
  AbsolutePanel absolutePanel = new AbsolutePanel();

  // Explicitly size it to 100 x 100 pixels
  absolutePanel.setPixelSize(100, 100);

  // Add a border so we can see what's going on
  DOM.setStyleAttribute(absolutePanel.getElement(),
      "border", "1px solid black");

  // Attach the AbsolutePanel
  RootPanel.get().add(absolutePanel, 50, 50);

  // Create a glass panel with `autoHide = true`
  GlassPanel glassPanel = new GlassPanel(true);

  // Attach (display) the glass panel
  absolutePanel.add(glassPanel, 0, 0);
}}}


== Covering an `id` based `RootPanel` ==
{{{
  <table border="1">
    <tr>
      <td>CELL 1</td>
      <td id="cell2"></td>
      <td>CELL 3</td>
    </tr>
  </table>
}}}

{{{
  // Get the RootPanel reference, e.g. a `TD` element
  RootPanel rootPanel = RootPanel.get("cell2");

  // Add some content to our RootPanel to give it dimensions
  rootPanel.add(new Label("This is 'cell2'.");

  // Workaround GWT issue 1813
  DOM.setStyleAttribute(element, "position", "relative");
  DOM.setStyleAttribute(element, "overflow", "hidden");
  DOM.setStyleAttribute(element, "display", "block");

  // Create a glass panel with `autoHide = true`
  GlassPanel glassPanel = new GlassPanel(true);

  // Attach (display) the glass panel
  rootPanel.add(glassPanel, 0, 0);
}}}
