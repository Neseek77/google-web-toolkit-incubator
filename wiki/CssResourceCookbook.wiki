#summary Various examples of how to use CssResource
#labels Type-Guide

This document is currently under construction.

= Browser-specific css =

{{{
.foo {
  background: green;
}

@if user.agent ie6 {
  /* Rendering fix */
  .foo {
    position: relative;
  }
} @elif user.agent safari {
  .foo {
    \-webkit-border-radius: 4px;
  }
} @else {
  .foo {
    font-size: x-large;
  }
}
}}}

= Obfuscated CSS class names =

CssResource will use method names as CSS class names to obfuscate at runtime.

{{{
interface MyCss extends CssResource {
  String className();
}

interface MyResources extends ImmutableResourceBundle {
  @Resource("my.css")
  MyCss css();
}
}}}

All instances of a selector with `.className` will be replaced with an obfuscated symbol when the CSS is compiled.  To use the obfuscated name:

{{{
MyResources resources = GWT.create(MyResources.class);
Label l = new Label("Some text");
l.addStyleName(resources.css().className());
}}}

If you have class names in your css file that are not legal Java identifiers, you can use the `@ClassName` annotation on the accessor method:
{{{
interface MyCss extends CssResource {
  @ClassName("some-other-name")
  String someOtherName();
}
}}}

= Background images / Sprites =

CssResource reuses the ImageResource bundling techniques and applies them to CSS background images.  This is generally known as "spriting" and a special `@sprite` rule is used in CssResource.

{{{
interface MyResources extends ImmutableResourceBundle {
  @Resource("image.png")
  ImageResource image();

  @Resource("my.css");
  CssResource css();
}
}}}

In `my.css`, sprites are defined using the `@sprite` keyword, followed by an arbitrary CSS selector, and the rule block must include a `gwt-image` property.  The `gwt-image` property should name the ImageResource accessor function.
{{{
@sprite .myImage {
  gwt-image: 'image';
}
}}}

The elements that match the given selection will display the named image and have their heights and widths automatically set to that of the image.

== Tiled images ==

If the ImageResource is decorated with an `@ImageOptions` annotation, the source image can be tiled along the X- or Y-axis.  This allows you to use 1-pixel wide (or tall) images to define borders, while still taking advantage of the image bundling optimizations afforded by ImageResource.

{{{
interface MyResources extends ImmutableResourceBundle {
  @ImageOptions(repeatStyle = RepeatStyle.Horizontal)
  @Resource("image.png")
  ImageResource image();
}
}}}

The elements that match the `@sprite`'s selector will only have their height or width set, based on the direction in which the image is to be repeated.

== 9-boxes ==

In order to make the content area of a 9-box have the correct size, the height and widths of the border images must be taken into account.  Instead of hard-coding the image widths into your CSS file, you can use the `value()` CSS function to insert the height or width from the associated ImageResource.

{{{
/* TODO: Fill this out with a complete example */
.my-nine-box {
  padding-left: value('leftBorderImage.getWidth', 'px');
  padding-right: value('rightBorderImage.getWidth', 'px');
}
}}}