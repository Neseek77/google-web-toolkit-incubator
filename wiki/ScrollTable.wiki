#summary A scrollable table with fixed header and footer sections and a scrollable data area
#labels Type-Widget



= Introduction =
The ScrollTable Widget is a three part table consisting of a fixed header table, a fixed footer table (optional), and a scrollable data grid.

Example:
[http://google-web-toolkit-incubator.googlecode.com/svn/trunk/demo/ScrollTable/index.html]



= Features =

In addition to the scrolling feature, the ScrollTable supports many other features as described below.  All of the features can be enabled or disabled, and they can be accessed programatically.

=== Complex Headers and Footers ===

The header and footer tables support colspans and rowspans, which allows you to make them as complex as needed.  For example, you can have a column headers that are grouped into sections.

=== Row Selection ===

The data portion supports selection of rows via the mouse.  If multiple row selection is enabled, users can select multiple rows using the ctrl key, or they can shift click to select a range of rows.

=== Row and Cell Highlighting ===

Rows or cells can be highlighted on mouseover.  This feature can be used with row selection.

=== Column Resizing and Auto Resizing ===

Users can drag the edge of a column header to resize the column.  If the header spans multiple columns, all columns will be resized proportional to their original sizes.  The ScrollTable supports many resize policies as well.  You can allow users to resize the entire grid, or confine the grid to a specific width and allow users to redistribute the space between the columns.

In addition, users can double click on the edge of a header cell to auto resize the column to the minimum width required to fit the content.

=== Multi Column Sorting ===

The ScrollTable supports sorting of multiple columns.  As the user clicks on columns, the grid keeps track of a ColumnSortList, which contains the sequential list of all columns that have been sorted, and their sort order.

You can specify your own ColumnSorter or use the build in ColumnSorter, which sorts using native Javascript comparisons.



= Setup Instructions =

Add these line to your module.gwt.xml file:
{{{
  <inherits name='com.google.gwt.widgetideas.WidgetIdeas'/>
  <inherits name='com.google.gwt.widgetideas.ScrollTable'/>

  <stylesheet src='ScrollTableDemo.css'/>
}}}

In your public directory, include the following stylesheet:
[http://google-web-toolkit-incubator.googlecode.com/svn/trunk/demo/ScrollTable/ScrollTableDemo.css ScrollTableDemo.css]

Create a subdirectory called "images" and add the background image:
[http://google-web-toolkit-incubator.googlecode.com/svn/trunk/demo/ScrollTable/images/bg_header_gradient.gif bg_header_gradient.gif]



= Sample Code =
See the demo code for a complete sample.

{{{
  /**
   * Add a row of data cells each consisting of a string that describes the
   * row:column coordinates of the new cell. The number of columns in the new
   * row will match the number of columns in the grid.
   * 
   * @param beforeRow the index to add the new row into
   */
  public static void insertDataRow(int beforeRow) {
    // Insert the new row
    beforeRow = dataTable.insertRow(beforeRow);

    // Set the data in the new row
    int numColumns = dataTable.getColumnCount();
    for (int column = 0; column < numColumns; column++) {
      String label = beforeRow + ":" + column;
      if (column == 0) {
        dataTable.setWidget(beforeRow, column, new CheckBox(label));
      } else if (column == 2) {
        int rand = (int) (Math.random() * 100000);
        dataTable.setHTML(beforeRow, column, rand + "");
      } else {
        dataTable.setHTML(beforeRow, column, label);
      }
    }
  }

  /**
   * This is the entry point method.
   */
  public void onModuleLoad() {
    // Create the inner tables
    getHeaderTable();
    getFooterTable();
    getDataTable();
    
    // Add the scroll table to the page
    headerTable = new FixedWidthFlexTable();;
    dataTable = new SortableFixedWidthGrid();
    dataTable.setHoveringPolicy(SelectionGrid.HOVERING_POLICY_ROW);
    footerTable = new FixedWidthGrid();
    scrollTable = new ScrollTable(dataTable, headerTable);
    scrollTable.setFooterTable(footerTable);

    // Setup the header
    setupScrollTable();
    
    // Add some data the data table
    dataTable.resize(0, 13);
    for (int i = 0; i < 15; i++) {
      insertDataRow(i);
    }
    
    // Add some data to the footer table
    footerTable.resize(1, 13);
    for (int i = 0; i < 13; i++) {
      footerTable.setText(0, i, "Col " + i);
    }

    // Redraw the scroll table
    scrollTable.redraw();
    
    // Add the components to the page
    RootPanel.get().add(scrollTable);
    RootPanel.get().add(new HTML("<BR>"));
    RootPanel.get().add(createTabPanel());
  }

  /**
   * Setup the scroll table.
   */
  private void setupScrollTable() {
    // Setup the formatting
    scrollTable.setSize("95%", "50%");
    scrollTable.setCellPadding(3);
    scrollTable.setCellSpacing(1);
    scrollTable.setResizePolicy(ScrollTable.RESIZE_POLICY_FILL_WIDTH);

    // Level 1 headers
    FlexCellFormatter headerFormatter = headerTable.getFlexCellFormatter();
    headerTable.setHTML(0, 0, "Info Table");
    headerFormatter.setColSpan(0, 0, 13);

    // Level 2 headers
    headerTable.setHTML(1, 0, "Group Header 0<BR>Multiline");
    headerFormatter.setColSpan(1, 0, 2);
    headerFormatter.setRowSpan(1, 0, 2);
    headerTable.setHTML(1, 1, "Group Header 1");
    headerFormatter.setColSpan(1, 1, 3);
    headerTable.setHTML(1, 2, "Group Header 2");
    headerFormatter.setColSpan(1, 2, 1);
    headerFormatter.setRowSpan(1, 2, 2);
    headerTable.setHTML(1, 3, "Group Header 3");
    headerFormatter.setColSpan(1, 3, 1);
    headerFormatter.setRowSpan(1, 3, 2);
    headerTable.setHTML(1, 4, "Group Header 4");
    headerFormatter.setColSpan(1, 4, 3);
    headerTable.setHTML(1, 5, "Group Header 5");
    headerFormatter.setColSpan(1, 5, 3);

    // Level 3 headers
    for (int cell = 0; cell < 9; cell++) {
      headerTable.setHTML(2, cell, "Header " + cell);
    }
  }
}}}
 
 
 
 
 
 
 
 
 