#summary Provides structured access to application resources

= Introduction =

 The resources in a deployed GWT application can be roughly categorized into resources to never cache (.nocache.js), to cache forever (.cache.html), and everything else (myapp.css).  The proposed ResourceBundle interface seeks to move entries in the everything-else category into the cache-forever category.

= Goals =

  * No more uncertainty if your application is getting the right contents for program resources.  How often have you had to manually clear the browser's cache to force a refresh of a CSS or configuration file?
  * Decrease non-determinism caused by intermediate proxy servers.
  * Enable more aggressive caching headers can be used for program resources.
  * Eliminate mismatches between filenames and constants in Java code. The compile process will log errors if a resource is unavailable during the compilation process.
  * Use of data: URLs or embedding resources in compiled JS when browser- and size-appropriate to eliminate round-trips entirely.
  * Provides a future framework for automatically generating manifests for Google Gears resource stores.
  * Ensure there is no penalty for having multiple ResourceBundle resource functions refer to the same content.
  * To optionally include statistics about the number and size of resources used by your application.

= Non-Goals =

  * To provide a file-system abstraction

= Examples =

Interfaces:
{{{
public interface MyResources extends ResourceBundle {
 public static final MyResources INSTANCE =  (MyResources) GWT.create(MyResources.class);

 /** @gwt.resource myApp.css */
 public TextResource css();

 /** @gwt.resource myConfiguration.xml */
 public TextResource initialConfiguration();

 /** @gwt.resource com/foo/bar/someGraphic.png */
 public DataResource otherFile();
}
}}}




= Potential pitfalls =
  * Changing the content of the resources will change the filenames (or data: encoding), thus forcing a recompile of the GWT application. To avoid this, the inlining and renaming features can be globally toggled off in your gwt.xml file during the development phase.
  * Inlining files into the compiled JS may not make sense if those files are not always accessed by the program, thus inlining should be configurable on a per-resource or per-ResourceBundle basis.


= Future possibilities =
  * Automatic, distributed cache warming.  This could be especially useful for popular apps to pre-distribute resources into intermediate proxy servers.
  * Google Gears resource store integration.
  * If the GWT compiler is re-targeted at widget- or gadget-likeenvironments, they may have particular requirements for packaging and referencing external resources.



NB:
As part of the ResourceBundle docs, we would also include a sample
.htaccess as the preferred setup:
{{{
ExpiresActive on
ExpiresDefault "now plus 2 hours"
Header append Cache-Control public
SetOutputFilter DEFLATE

<Files *.cache.*>
 ExpiresDefault "now plus 1 year"
</Files>

<Files *.nocache.*>
 ExpiresDefault "now plus 2 minutes"
</Files>
}}}

