#summary TreeTable

|| Live demo || [http://google-web-toolkit-incubator.googlecode.com/svn/branches/dflorey/tableAddons/demo/TreeTableDemo/TreeTableDemo.html] ||
|| Java docs || coming soon... ||
|| Sample code || [http://google-web-toolkit-incubator.googlecode.com/svn/branches/dflorey/tableAddons/src-demo/com/google/gwt/gen2/demo/scrolltable/client/TreeTableDemo.java Demo code] ||
|| Source starting point|| [http://google-web-toolkit-incubator.googlecode.com/svn/branches/dflorey/tableAddons/src/com/google/gwt/gen2/table/client/TreeTable.java TreeTable.java] ||

= Introduction =
The TreeTable is extending the gwt incubator table framework. The code currently exists in my branch. To check out the latest sources, type

{{{
svn checkout http://google-web-toolkit-incubator.googlecode.com/svn/branches/dflorey/tableAddons google-web-toolkit-incubator-with-treetable
}}}

A TreeTable is able to show a tree where each tree item can have some additional fields that shall be displayed. 

= Details =

= Tutorial =

The following steps need to be done in order to get a fully functional TreeTable.
First of all we have to create a class reflecting the objects in our tree.
Let's create a fictional family tree, so we need a class representing our ancestors:

{{{
class Ancestor extends AbstractTreeTableItem {
    private String firstName, lastName;
    private double iq;
    private Date dateOfBirth;

    public Ancestor(String firstName, String lastName, int iq, Date dateOfBirth) {
      this.firstName = firstName;
      this.lastName = lastName;
      this.iq = iq;
      this.dateOfBirth = dateOfBirth;
    }

    public String getFirstName() {
      return firstName;
    }

    public String getLastName() {
      return lastName;
    }

    public double getIq() {
      return iq;
    }

    public Date getDateOfBirth() {
      return dateOfBirth;
    }

    @Override
    public String getDisplayName() {
      return firstName+" "+lastName;
    }

    @Override
    public String getId() {
      return firstName+lastName+dateOfBirth;
    }
}

}}}

Note that this class extends the AbstractTreeTableItem and we have to implement two abstract methods providing some info that the !TreeTable requires to work properly.
We have to implement the getDisplayName() method that should return a user friendly textual representation and the getId() method that has to return a unique id.

