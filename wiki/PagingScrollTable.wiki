#summary A full featured table that supports scrolling, paging, column resizing and sorting, cell editing, and more...
#labels Type-Widget

*NOTE*: This documentation is not yet finished

= Introduction =

The gen2 PagingScrollTable supports navigating between pages of data, which can be generated on the client or via an RPC call.  It also supports column resizing within a minimum and maximum range, column sorting on the client or server side, inline cell editing, data caching, and scrolling with a fixed header and footer.  The data can be rendered very quickly as a String using a TableBulkRenderer.

Note: You can view documentation on the old version of the PagingScrollTable on the  PagingScrollTableOld wiki page.


= How It Works =

== Class Diagram ==

Coming soon...

== Row Values ==

A PagingScrollTable can represent a list of any type, which we call the row value.  For example, you might define a `Student` object to use as the row value.  Each column will contain information about the row value, such as the name, age, and GPA of the `Student`.

== TableModel ==

The [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/TableModel.java TableModel] defines how the PagingScrollTable accesses data.  The method `requestRows(Request, Callback)` is called any time the PagingScrollTable needs more data.  From here, you can return data from a data source on the client, or you can send an RPC request for the data.

The `Request` includes the `ColumnSortInfo` from the PagingScrollTable, allowing you to perform server side sorting.

== ColumnDefinition ==

The [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/ColumnDefinition.java ColumnDefinition] defines information about the columns in your table, such as the minimum/maximum/preferred column width, whether the column is sortable, and how to set and retrieve data from a row value.  For example, a `ColumnDefinition` used for the name column in a PagingScrollTable would define how to get and set the name of a Student`.  The [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/AbstractColumnDefinition.java AbstractColumnDefinition] is a basic implementation that allows you to get and set the minimum/maximum/preferred column widths.

You can also attach a [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/CellRenderer.java CellRenderer] or [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/CellEditor.java CellEditor] to a ColumnDefinition to control how it will appear.  The [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/InlineCellEditor.java InlineCellEditors] (eg. [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/TextCellEditor.java TextCellEditor] are simple CellEditor implementations that popup input fields above the cell.

[http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/ColumnDefinition.java ColumnDefinitions] are combined into a [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/TableDefinition.java TableDefinition], which defines which columns will appear in your table via the `getVisibleColumnDefinitions()` method.  The [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/DefaultTableDefinition.java DefaultTableDefinition] implementation provides convenience methods for adding, removing, and hiding columns.

== TableBulkRenderer ==

The [http://code.google.com/p/google-web-toolkit-incubator/source/browse/trunk/src/com/google/gwt/gen2/table/client/TableBulkRenderer.java TableBulkRenderer] allows you to render your PagingScrollTable as an HTML string, which dramatically increases performance of large tables.  Using the CellRenderers defined in the ColumnDefinitions, you can customize the look of each column or cell based on the contents.

== PagingScrollTable ==

When all of the components are combined, you get a PagingScrollTable that requests data from the TableModel and renders the columns defined the TableDefinition using the TableBulkRenderer for performance.



= Walkthrough =

Coming soon...


}}}